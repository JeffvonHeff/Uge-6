-- Schema for retail bike store data extracted from AllcsvData.xlsx
-- This script creates the database objects and relationships required to
-- support the supplied CSV sheets using PostgreSQL.

DROP DATABASE IF EXISTS bike_shop;
CREATE DATABASE bike_shop;
\connect bike_shop

SET search_path TO public;

-- Lookup tables -----------------------------------------------------------
CREATE TABLE brands (
    brand_id   INTEGER PRIMARY KEY,
    brand_name TEXT NOT NULL UNIQUE
);

CREATE TABLE categories (
    category_id   INTEGER PRIMARY KEY,
    category_name TEXT NOT NULL UNIQUE
);

CREATE TABLE stores (
    store_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    store_name TEXT NOT NULL,
    phone      VARCHAR(25),
    email      TEXT,
    street     TEXT NOT NULL,
    city       VARCHAR(100) NOT NULL,
    state      CHAR(2) NOT NULL,
    zip_code   VARCHAR(10) NOT NULL,
    CONSTRAINT uk_stores_name UNIQUE (store_name)
);

CREATE INDEX idx_stores_state_city ON stores (state, city);

-- Core entities -----------------------------------------------------------
CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY,
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    email       TEXT NOT NULL,
    phone       VARCHAR(25),
    street      TEXT NOT NULL,
    city        VARCHAR(100) NOT NULL,
    state       CHAR(2) NOT NULL,
    zip_code    VARCHAR(10) NOT NULL,
    CONSTRAINT uk_customers_email UNIQUE (email)
);

CREATE TABLE products (
    product_id   INTEGER PRIMARY KEY,
    product_name TEXT NOT NULL,
    brand_id     INTEGER NOT NULL,
    category_id  INTEGER NOT NULL,
    model_year   SMALLINT NOT NULL,
    list_price   NUMERIC(10, 2) NOT NULL,
    CONSTRAINT fk_products_brand
        FOREIGN KEY (brand_id) REFERENCES brands (brand_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT fk_products_category
        FOREIGN KEY (category_id) REFERENCES categories (category_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

CREATE INDEX idx_products_brand ON products (brand_id);
CREATE INDEX idx_products_category ON products (category_id);

CREATE TABLE staffs (
    staff_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    email       TEXT NOT NULL,
    phone       VARCHAR(25),
    active      BOOLEAN NOT NULL DEFAULT TRUE,
    street      TEXT NOT NULL,
    store_id    INTEGER NOT NULL,
    manager_id  INTEGER,
    CONSTRAINT uk_staffs_email UNIQUE (email),
    CONSTRAINT fk_staffs_store
        FOREIGN KEY (store_id) REFERENCES stores (store_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT fk_staffs_manager
        FOREIGN KEY (manager_id) REFERENCES staffs (staff_id)
        ON UPDATE CASCADE
        ON DELETE SET NULL
);

CREATE INDEX idx_staffs_store ON staffs (store_id);

CREATE TABLE stocks (
    store_id   INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity   INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY (store_id, product_id),
    CONSTRAINT fk_stocks_store
        FOREIGN KEY (store_id) REFERENCES stores (store_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT fk_stocks_product
        FOREIGN KEY (product_id) REFERENCES products (product_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

-- Sales activity ----------------------------------------------------------
CREATE TABLE orders (
    order_id      INTEGER PRIMARY KEY,
    customer_id   INTEGER NOT NULL,
    store_id      INTEGER NOT NULL,
    staff_id      INTEGER NOT NULL,
    order_status  SMALLINT NOT NULL,
    order_date    DATE NOT NULL,
    required_date DATE NOT NULL,
    shipped_date  DATE,
    CONSTRAINT fk_orders_customer
        FOREIGN KEY (customer_id) REFERENCES customers (customer_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT fk_orders_store
        FOREIGN KEY (store_id) REFERENCES stores (store_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT fk_orders_staff
        FOREIGN KEY (staff_id) REFERENCES staffs (staff_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

CREATE INDEX idx_orders_customer ON orders (customer_id);
CREATE INDEX idx_orders_store ON orders (store_id);
CREATE INDEX idx_orders_staff ON orders (staff_id);

CREATE TABLE order_items (
    order_id   INTEGER NOT NULL,
    item_id    INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity   INTEGER NOT NULL,
    list_price NUMERIC(10, 2) NOT NULL,
    discount   NUMERIC(5, 2) NOT NULL DEFAULT 0.00,
    PRIMARY KEY (order_id, item_id),
    CONSTRAINT fk_order_items_order
        FOREIGN KEY (order_id) REFERENCES orders (order_id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT fk_order_items_product
        FOREIGN KEY (product_id) REFERENCES products (product_id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

-- Helpful views -----------------------------------------------------------
CREATE OR REPLACE VIEW vw_order_details AS
SELECT
    o.order_id,
    o.order_date,
    c.first_name AS customer_first_name,
    c.last_name  AS customer_last_name,
    s.store_name,
    CONCAT(sf.first_name, ' ', sf.last_name) AS staff_member,
    oi.item_id,
    p.product_name,
    oi.quantity,
    oi.list_price,
    oi.discount,
    (oi.quantity * oi.list_price * (1 - oi.discount)) AS line_total
FROM orders AS o
JOIN customers AS c ON c.customer_id = o.customer_id
JOIN stores AS s ON s.store_id = o.store_id
JOIN staffs AS sf ON sf.staff_id = o.staff_id
JOIN order_items AS oi ON oi.order_id = o.order_id
JOIN products AS p ON p.product_id = oi.product_id;
